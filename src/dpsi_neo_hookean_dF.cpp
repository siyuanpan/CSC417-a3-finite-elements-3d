#include <dpsi_neo_hookean_dF.h>

void dpsi_neo_hookean_dF(Eigen::Vector9d &dw, Eigen::Ref<const Eigen::Matrix3d> F, double C, double D)
{
    double F11, F12, F13, F21, F22, F23, F31, F32, F33;
    F11 = F(0, 0);
    F12 = F(0, 1);
    F13 = F(0, 2);
    F21 = F(1, 0);
    F22 = F(1, 1);
    F23 = F(1, 2);
    F31 = F(2, 0);
    F32 = F(2, 1);
    F33 = F(2, 2);

    /*
    ans = // Not supported in C:
// ImmutableDenseMatrix
Matrix([
[C*(2*F11/(F11*F22*F33 - F11*F23*F32 - F12*F21*F33 + F12*F23*F31 + F13*F21*F32 - F13*F22*F31)**(2/3) + (-2*F22*F33/3 + 2*F23*F32/3)*(F11**2 + F12**2 + F13**2 + F21**2 + F22**2 + F23**2 + F31**2 + F32**2 + F33**2)/(F11*F22*F33 - F11*F23*F32 - F12*F21*F33 + F12*F23*F31 + F13*F21*F32 - F13*F22*F31)**(5/3)) + D*(2*F22*F33 - 2*F23*F32)*(F11*F22*F33 - F11*F23*F32 - F12*F21*F33 + F12*F23*F31 + F13*F21*F32 - F13*F22*F31 - 1)],
[C*(2*F21/(F11*F22*F33 - F11*F23*F32 - F12*F21*F33 + F12*F23*F31 + F13*F21*F32 - F13*F22*F31)**(2/3) + (2*F12*F33/3 - 2*F13*F32/3)*(F11**2 + F12**2 + F13**2 + F21**2 + F22**2 + F23**2 + F31**2 + F32**2 + F33**2)/(F11*F22*F33 - F11*F23*F32 - F12*F21*F33 + F12*F23*F31 + F13*F21*F32 - F13*F22*F31)**(5/3)) + D*(-2*F12*F33 + 2*F13*F32)*(F11*F22*F33 - F11*F23*F32 - F12*F21*F33 + F12*F23*F31 + F13*F21*F32 - F13*F22*F31 - 1)],
[C*(2*F31/(F11*F22*F33 - F11*F23*F32 - F12*F21*F33 + F12*F23*F31 + F13*F21*F32 - F13*F22*F31)**(2/3) + (-2*F12*F23/3 + 2*F13*F22/3)*(F11**2 + F12**2 + F13**2 + F21**2 + F22**2 + F23**2 + F31**2 + F32**2 + F33**2)/(F11*F22*F33 - F11*F23*F32 - F12*F21*F33 + F12*F23*F31 + F13*F21*F32 - F13*F22*F31)**(5/3)) + D*(2*F12*F23 - 2*F13*F22)*(F11*F22*F33 - F11*F23*F32 - F12*F21*F33 + F12*F23*F31 + F13*F21*F32 - F13*F22*F31 - 1)],
[C*(2*F12/(F11*F22*F33 - F11*F23*F32 - F12*F21*F33 + F12*F23*F31 + F13*F21*F32 - F13*F22*F31)**(2/3) + (2*F21*F33/3 - 2*F23*F31/3)*(F11**2 + F12**2 + F13**2 + F21**2 + F22**2 + F23**2 + F31**2 + F32**2 + F33**2)/(F11*F22*F33 - F11*F23*F32 - F12*F21*F33 + F12*F23*F31 + F13*F21*F32 - F13*F22*F31)**(5/3)) + D*(-2*F21*F33 + 2*F23*F31)*(F11*F22*F33 - F11*F23*F32 - F12*F21*F33 + F12*F23*F31 + F13*F21*F32 - F13*F22*F31 - 1)],
[C*(2*F22/(F11*F22*F33 - F11*F23*F32 - F12*F21*F33 + F12*F23*F31 + F13*F21*F32 - F13*F22*F31)**(2/3) + (-2*F11*F33/3 + 2*F13*F31/3)*(F11**2 + F12**2 + F13**2 + F21**2 + F22**2 + F23**2 + F31**2 + F32**2 + F33**2)/(F11*F22*F33 - F11*F23*F32 - F12*F21*F33 + F12*F23*F31 + F13*F21*F32 - F13*F22*F31)**(5/3)) + D*(2*F11*F33 - 2*F13*F31)*(F11*F22*F33 - F11*F23*F32 - F12*F21*F33 + F12*F23*F31 + F13*F21*F32 - F13*F22*F31 - 1)],
[C*(2*F32/(F11*F22*F33 - F11*F23*F32 - F12*F21*F33 + F12*F23*F31 + F13*F21*F32 - F13*F22*F31)**(2/3) + (2*F11*F23/3 - 2*F13*F21/3)*(F11**2 + F12**2 + F13**2 + F21**2 + F22**2 + F23**2 + F31**2 + F32**2 + F33**2)/(F11*F22*F33 - F11*F23*F32 - F12*F21*F33 + F12*F23*F31 + F13*F21*F32 - F13*F22*F31)**(5/3)) + D*(-2*F11*F23 + 2*F13*F21)*(F11*F22*F33 - F11*F23*F32 - F12*F21*F33 + F12*F23*F31 + F13*F21*F32 - F13*F22*F31 - 1)],
[C*(2*F13/(F11*F22*F33 - F11*F23*F32 - F12*F21*F33 + F12*F23*F31 + F13*F21*F32 - F13*F22*F31)**(2/3) + (-2*F21*F32/3 + 2*F22*F31/3)*(F11**2 + F12**2 + F13**2 + F21**2 + F22**2 + F23**2 + F31**2 + F32**2 + F33**2)/(F11*F22*F33 - F11*F23*F32 - F12*F21*F33 + F12*F23*F31 + F13*F21*F32 - F13*F22*F31)**(5/3)) + D*(2*F21*F32 - 2*F22*F31)*(F11*F22*F33 - F11*F23*F32 - F12*F21*F33 + F12*F23*F31 + F13*F21*F32 - F13*F22*F31 - 1)],
[C*(2*F23/(F11*F22*F33 - F11*F23*F32 - F12*F21*F33 + F12*F23*F31 + F13*F21*F32 - F13*F22*F31)**(2/3) + (2*F11*F32/3 - 2*F12*F31/3)*(F11**2 + F12**2 + F13**2 + F21**2 + F22**2 + F23**2 + F31**2 + F32**2 + F33**2)/(F11*F22*F33 - F11*F23*F32 - F12*F21*F33 + F12*F23*F31 + F13*F21*F32 - F13*F22*F31)**(5/3)) + D*(-2*F11*F32 + 2*F12*F31)*(F11*F22*F33 - F11*F23*F32 - F12*F21*F33 + F12*F23*F31 + F13*F21*F32 - F13*F22*F31 - 1)],
[C*(2*F33/(F11*F22*F33 - F11*F23*F32 - F12*F21*F33 + F12*F23*F31 + F13*F21*F32 - F13*F22*F31)**(2/3) + (-2*F11*F22/3 + 2*F12*F21/3)*(F11**2 + F12**2 + F13**2 + F21**2 + F22**2 + F23**2 + F31**2 + F32**2 + F33**2)/(F11*F22*F33 - F11*F23*F32 - F12*F21*F33 + F12*F23*F31 + F13*F21*F32 - F13*F22*F31)**(5/3)) + D*(2*F11*F22 - 2*F12*F21)*(F11*F22*F33 - F11*F23*F32 - F12*F21*F33 + F12*F23*F31 + F13*F21*F32 - F13*F22*F31 - 1)]])

    */

    dw(0) = C * (2 * F11 / std::pow(F11 * F22 * F33 - F11 * F23 * F32 - F12 * F21 * F33 + F12 * F23 * F31 + F13 * F21 * F32 - F13 * F22 * F31, 2 / 3) + (-2 * F22 * F33 / 3 + 2 * F23 * F32 / 3) * (F11 * F11 + F12 * F12 + F13 * F13 + F21 * F21 + F22 * F22 + F23 * F23 + F31 * F31 + F32 * F32 + F33 * F33) / std::pow(F11 * F22 * F33 - F11 * F23 * F32 - F12 * F21 * F33 + F12 * F23 * F31 + F13 * F21 * F32 - F13 * F22 * F31, 5 / 3)) + D * (2 * F22 * F33 - 2 * F23 * F32) * (F11 * F22 * F33 - F11 * F23 * F32 - F12 * F21 * F33 + F12 * F23 * F31 + F13 * F21 * F32 - F13 * F22 * F31 - 1);
    dw(1) = C * (2 * F21 / std::pow(F11 * F22 * F33 - F11 * F23 * F32 - F12 * F21 * F33 + F12 * F23 * F31 + F13 * F21 * F32 - F13 * F22 * F31, 2 / 3) + (2 * F12 * F33 / 3 - 2 * F13 * F32 / 3) * (F11 * F11 + F12 * F12 + F13 * F13 + F21 * F21 + F22 * F22 + F23 * F23 + F31 * F31 + F32 * F32 + F33 * F33) / std::pow(F11 * F22 * F33 - F11 * F23 * F32 - F12 * F21 * F33 + F12 * F23 * F31 + F13 * F21 * F32 - F13 * F22 * F31, 5 / 3)) + D * (-2 * F12 * F33 + 2 * F13 * F32) * (F11 * F22 * F33 - F11 * F23 * F32 - F12 * F21 * F33 + F12 * F23 * F31 + F13 * F21 * F32 - F13 * F22 * F31 - 1);
    dw(2) = C * (2 * F31 / std::pow(F11 * F22 * F33 - F11 * F23 * F32 - F12 * F21 * F33 + F12 * F23 * F31 + F13 * F21 * F32 - F13 * F22 * F31, 2 / 3) + (-2 * F12 * F23 / 3 + 2 * F13 * F22 / 3) * (F11 * F11 + F12 * F12 + F13 * F13 + F21 * F21 + F22 * F22 + F23 * F23 + F31 * F31 + F32 * F32 + F33 * F33) / std::pow(F11 * F22 * F33 - F11 * F23 * F32 - F12 * F21 * F33 + F12 * F23 * F31 + F13 * F21 * F32 - F13 * F22 * F31, 5 / 3)) + D * (2 * F12 * F23 - 2 * F13 * F22) * (F11 * F22 * F33 - F11 * F23 * F32 - F12 * F21 * F33 + F12 * F23 * F31 + F13 * F21 * F32 - F13 * F22 * F31 - 1);
    dw(3) = C * (2 * F12 / std::pow(F11 * F22 * F33 - F11 * F23 * F32 - F12 * F21 * F33 + F12 * F23 * F31 + F13 * F21 * F32 - F13 * F22 * F31, 2 / 3) + (2 * F21 * F33 / 3 - 2 * F23 * F31 / 3) * (F11 * F11 + F12 * F12 + F13 * F13 + F21 * F21 + F22 * F22 + F23 * F23 + F31 * F31 + F32 * F32 + F33 * F33) / std::pow(F11 * F22 * F33 - F11 * F23 * F32 - F12 * F21 * F33 + F12 * F23 * F31 + F13 * F21 * F32 - F13 * F22 * F31, 5 / 3)) + D * (-2 * F21 * F33 + 2 * F23 * F31) * (F11 * F22 * F33 - F11 * F23 * F32 - F12 * F21 * F33 + F12 * F23 * F31 + F13 * F21 * F32 - F13 * F22 * F31 - 1);
    dw(4) = C * (2 * F22 / std::pow(F11 * F22 * F33 - F11 * F23 * F32 - F12 * F21 * F33 + F12 * F23 * F31 + F13 * F21 * F32 - F13 * F22 * F31, 2 / 3) + (-2 * F11 * F33 / 3 + 2 * F13 * F31 / 3) * (F11 * F11 + F12 * F12 + F13 * F13 + F21 * F21 + F22 * F22 + F23 * F23 + F31 * F31 + F32 * F32 + F33 * F33) / std::pow(F11 * F22 * F33 - F11 * F23 * F32 - F12 * F21 * F33 + F12 * F23 * F31 + F13 * F21 * F32 - F13 * F22 * F31, 5 / 3)) + D * (2 * F11 * F33 - 2 * F13 * F31) * (F11 * F22 * F33 - F11 * F23 * F32 - F12 * F21 * F33 + F12 * F23 * F31 + F13 * F21 * F32 - F13 * F22 * F31 - 1);
    dw(5) = C * (2 * F32 / std::pow(F11 * F22 * F33 - F11 * F23 * F32 - F12 * F21 * F33 + F12 * F23 * F31 + F13 * F21 * F32 - F13 * F22 * F31, 2 / 3) + (2 * F11 * F23 / 3 - 2 * F13 * F21 / 3) * (F11 * F11 + F12 * F12 + F13 * F13 + F21 * F21 + F22 * F22 + F23 * F23 + F31 * F31 + F32 * F32 + F33 * F33) / std::pow(F11 * F22 * F33 - F11 * F23 * F32 - F12 * F21 * F33 + F12 * F23 * F31 + F13 * F21 * F32 - F13 * F22 * F31, 5 / 3)) + D * (-2 * F11 * F23 + 2 * F13 * F21) * (F11 * F22 * F33 - F11 * F23 * F32 - F12 * F21 * F33 + F12 * F23 * F31 + F13 * F21 * F32 - F13 * F22 * F31 - 1);
    dw(6) = C * (2 * F13 / std::pow(F11 * F22 * F33 - F11 * F23 * F32 - F12 * F21 * F33 + F12 * F23 * F31 + F13 * F21 * F32 - F13 * F22 * F31, 2 / 3) + (-2 * F21 * F32 / 3 + 2 * F22 * F31 / 3) * (F11 * F11 + F12 * F12 + F13 * F13 + F21 * F21 + F22 * F22 + F23 * F23 + F31 * F31 + F32 * F32 + F33 * F33) / std::pow(F11 * F22 * F33 - F11 * F23 * F32 - F12 * F21 * F33 + F12 * F23 * F31 + F13 * F21 * F32 - F13 * F22 * F31, 5 / 3)) + D * (2 * F21 * F32 - 2 * F22 * F31) * (F11 * F22 * F33 - F11 * F23 * F32 - F12 * F21 * F33 + F12 * F23 * F31 + F13 * F21 * F32 - F13 * F22 * F31 - 1);
    dw(7) = C * (2 * F23 / std::pow(F11 * F22 * F33 - F11 * F23 * F32 - F12 * F21 * F33 + F12 * F23 * F31 + F13 * F21 * F32 - F13 * F22 * F31, 2 / 3) + (2 * F11 * F32 / 3 - 2 * F12 * F31 / 3) * (F11 * F11 + F12 * F12 + F13 * F13 + F21 * F21 + F22 * F22 + F23 * F23 + F31 * F31 + F32 * F32 + F33 * F33) / std::pow(F11 * F22 * F33 - F11 * F23 * F32 - F12 * F21 * F33 + F12 * F23 * F31 + F13 * F21 * F32 - F13 * F22 * F31, 5 / 3)) + D * (-2 * F11 * F32 + 2 * F12 * F31) * (F11 * F22 * F33 - F11 * F23 * F32 - F12 * F21 * F33 + F12 * F23 * F31 + F13 * F21 * F32 - F13 * F22 * F31 - 1);
    dw(8) = C * (2 * F33 / std::pow(F11 * F22 * F33 - F11 * F23 * F32 - F12 * F21 * F33 + F12 * F23 * F31 + F13 * F21 * F32 - F13 * F22 * F31, 2 / 3) + (-2 * F11 * F22 / 3 + 2 * F12 * F21 / 3) * (F11 * F11 + F12 * F12 + F13 * F13 + F21 * F21 + F22 * F22 + F23 * F23 + F31 * F31 + F32 * F32 + F33 * F33) / std::pow(F11 * F22 * F33 - F11 * F23 * F32 - F12 * F21 * F33 + F12 * F23 * F31 + F13 * F21 * F32 - F13 * F22 * F31, 5 / 3)) + D * (2 * F11 * F22 - 2 * F12 * F21) * (F11 * F22 * F33 - F11 * F23 * F32 - F12 * F21 * F33 + F12 * F23 * F31 + F13 * F21 * F32 - F13 * F22 * F31 - 1);
}